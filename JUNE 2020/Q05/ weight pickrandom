/*
we want higher weighted element to get higher weightage while selection
so random no = rand()%sum;
then we use the binary search to find  in which does a no fall into 

  time complexity for cumulative sum = O(N)
  query : Q and logn for binary search
  so overall complexity : O(N+Q logN)
*/
#define pb push_back
class Solution {
  vector <int> v;
  
public:
    Solution(vector<int>& w) {
      ios_base::sync_with_stdio(false);
      cin.tie(NULL);
      cout.tie(NULL);

      v.pb(w[0]);

      for(int i=1;i<w.size();++i)
      {
        v.pb(v.back()+w[i]);   //cumulative sum
      }
        
    }
    
    int pickIndex() {

      int rand_weight=rand()%(v.back());
      return upper_bound(v.begin(),v.end(),rand_weight)-v.begin();
      
        
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(w);
 * int param_1 = obj->pickIndex();
 */
