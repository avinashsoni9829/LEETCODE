
 /*
 done with the help of dfs+pruning

 pruning removes extra calls (basically we backtrack to prevous node whenever the cost sum >min_so_Far)

 also we will use the concept of visited array

 visited array are used to :
 -> avoid preprocessing  of an already processed node

 -> to avoid infinte cycles if present

 we can prpeare the cost matrix or can use the pairs along with the adjacency matrix

*/
class Solution {
  //DFS calls


  void solve(vector<vector<int>>&adj,vector<vector<int>>&cost,int src,int dst,int k,int &fare,int totcost,vector<bool>&visited)
  {
    if(k<-1)
    return;
    if(src==dst)
    {
      fare=min(fare,totcost);
      return;
    }

    visited[src]=true;

    for(int i=0;i<adj[src].size();++i)
    {
      if(!visited[adj[src][i]]   and (totcost+cost[src][adj[src][i]])<=fare)
      {
        solve(adj,cost,adj[src][i],dst,k-1,fare,totcost+cost[src][adj[src][i]],visited);
      }

    }
    visited[src]=false;

  }


public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
    	ios_base::sync_with_stdio(false);cin.tie(NULL);
      // [src,dest,cost]

      //prepare the adjacency matrix

      vector<vector<int>> adj(n);

      //prepare the cost matrix
      vector<vector<int>> cost(n+1,vector<int>(n+1));

      //creating the graph i,e the adjacency list

      for(int i=0;i<flights.size();++i)
      {
        adj[flights[i][0]].push_back(flights[i][1]);
        cost[flights[i][0]][flights[i][1]]=flights[i][2];
      }

      //creating the visited array

      vector<bool>visited(n+1,false);

      int fare=INT_MAX;
      solve(adj,cost,src,dst,K,fare,0,visited);

      if(fare==INT_MAX)
      return -1;
      return fare;



    }
};
